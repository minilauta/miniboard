<!DOCTYPE html>
<html>
  <head>
    <?=$this->fetch('common/meta.phtml')?>
    <?=$this->fetch('common/styles.phtml')?>
    <?=$this->fetch('common/scripts.phtml')?>
    <title>Manage</title>
  </head>
  <body>
    <?=$this->fetch('manage/menubar.phtml', ['board_id' => array_key_first(MB_BOARDS), 'thread_id' => null])?>
    <?=$this->fetch('common/header.phtml', ['h_title' => 'Manage', 'h_subtitle' => 'Management interface'])?>
    <hr>
    <?php
      switch ($route) {
        case 'import':
          if (funcs_manage_get_role() !== MB_ROLE_SUPERADMIN) {
            throw new AppException('manage.phtml', 'inline', 'insufficient permissions', SC_FORBIDDEN);
          }

          echo $this->fetch('manage/importform.phtml');
          break;
        case 'rebuild':
          if (funcs_manage_get_role() !== MB_ROLE_SUPERADMIN) {
            throw new AppException('manage.phtml', 'inline', 'insufficient permissions', SC_FORBIDDEN);
          }

          echo $this->fetch('manage/rebuildform.phtml');
          break;
        case 'refresh':
          if (funcs_manage_get_role() !== MB_ROLE_SUPERADMIN) {
            throw new AppException('manage.phtml', 'inline', 'insufficient permissions', SC_FORBIDDEN);
          }

          echo $this->fetch('manage/refreshform.phtml');
          break;
        case 'accounts':
          if (funcs_manage_get_role() !== MB_ROLE_SUPERADMIN) {
            throw new AppException('manage.phtml', 'inline', 'insufficient permissions', SC_FORBIDDEN);
          }

          // set constants
          $accounts_per_page = 10;

          // get accounts
          $accounts = select_all_accounts(false, $accounts_per_page * $page, $accounts_per_page);

          // get account count
          $accounts_n = count_all_accounts();

          // calculate page count
          $page_n = ceil($accounts_n / $accounts_per_page);

          echo $this->fetch('manage/accountform.phtml', [
            'accounts' => $accounts,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'logs':
          // set constants
          $logs_per_page = 100;

          // get logs
          $logs = select_all_logs(true, $logs_per_page * $page, $logs_per_page);

          // process logs
          foreach ($logs as $key => &$log) {
            $log['ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $log['ip_str'] : '<s>REDACTED</s>';
            $log['username_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $log['username'] : '<s>REDACTED</s>';
          }

          // get log count
          $logs_n = count_all_logs();

          // calculate page count
          $page_n = ceil($logs_n / $logs_per_page);

          echo $this->fetch('manage/logform.phtml', [
            'logs' => $logs,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'bans':
          // set constants
          $bans_per_page = 50;

          // get bans
          $bans = select_all_bans(true, $bans_per_page * $page, $bans_per_page);

          // process bans
          foreach ($bans as $key => &$ban) {
            $ban['ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $ban['ip_str'] : '<s>REDACTED</s>';
          }

          // get ban count
          $bans_n = count_all_bans();

          // calculate page count
          $page_n = ceil($bans_n / $bans_per_page);

          echo $this->fetch('manage/banform.phtml', [
            'bans' => $bans,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'csam_hashes':
          // set constants
          $rows_per_page = 50;

          // get rows
          $rows = select_all_csam_hashes(true, $rows_per_page * $page, $rows_per_page);

          // process rows
          foreach ($rows as $key => &$row) {
            $row['sha256'] = bin2hex($row['sha256']);
            $row['hash'] = bin2hex($row['hash']);
          }

          // get row count
          $rows_n = count_all_csam_hashes();

          // calculate page count
          $page_n = ceil($rows_n / $rows_per_page);

          echo $this->fetch('manage/csamhashform.phtml', [
            'rows' => $rows,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'posts':
          // set constants
          $posts_per_page = 50;

          // get posts
          $posts = select_all_posts(true, $posts_per_page * $page, $posts_per_page);

          // process posts (if thread returned, set thread related values)
          foreach ($posts as $key => &$post) {
            $post['ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $post['ip_str'] : '<s>REDACTED</s>';

            if ($post['parent_id'] !== 0) {
              continue;
            }

            $post['replies'] = [];
            $post['replies_n'] = count_posts('NULL', $post['board_id'], $post['post_id'], false, false);
          }

          // get post count
          $posts_n = count_all_posts();

          // calculate page count
          $page_n = ceil($posts_n / $posts_per_page);

          echo $this->fetch('manage/modform.phtml', [
            'posts' => $posts,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'threads':
          // set constants
          $posts_per_page = 50;

          // get posts
          $posts = select_all_threads(true, $posts_per_page * $page, $posts_per_page);

          // process posts
          foreach ($posts as $key => &$post) {
            $post['ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $post['ip_str'] : '<s>REDACTED</s>';
            $post['replies'] = [];
            $post['replies_n'] = count_posts('NULL', $post['board_id'], $post['post_id'], false, false);
          }

          // get post count
          $posts_n = count_all_threads();

          // calculate page count
          $page_n = ceil($posts_n / $posts_per_page);

          echo $this->fetch('manage/modform.phtml', [
            'posts' => $posts,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
        case 'reports':
        default:
          // set constants
          $reports_per_page = 50;

          // get reports
          $reports = select_all_reports(true, $reports_per_page * $page, $reports_per_page);

          // process reports (if thread returned, set thread related values)
          foreach ($reports as $key => &$report) {
            $report['r_ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $report['r_ip_str'] : '<s>REDACTED</s>';
            $report['ip_rendered'] = funcs_manage_get_role() === MB_ROLE_SUPERADMIN ? $report['ip_str'] : '<s>REDACTED</s>';

            if ($report['parent_id'] !== 0) {
              continue;
            }

            $report['replies'] = [];
            $report['replies_n'] = count_posts('NULL', $report['board_id'], $report['post_id'], false, false);
          }

          // get report count
          $reports_n = count_all_reports();

          // calculate page count
          $page_n = ceil($reports_n / $reports_per_page);

          echo $this->fetch('manage/reportform.phtml', [
            'reports' => $reports,
            'page' => $page,
            'page_n' => $page_n
          ]);
          echo $this->fetch('common/pagetable.phtml', ['page' => $page, 'page_n' => $page_n]);
          break;
      }
    ?>
    <hr>
    <div class="container-centered">
      <?=$this->fetch('common/footer.phtml')?>
    </div>
  </body>
</html>
